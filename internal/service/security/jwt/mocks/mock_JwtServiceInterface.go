// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jwt

import (
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJwtServiceInterface creates a new instance of MockJwtServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtServiceInterface {
	mock := &MockJwtServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJwtServiceInterface is an autogenerated mock type for the JwtServiceInterface type
type MockJwtServiceInterface struct {
	mock.Mock
}

type MockJwtServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwtServiceInterface) EXPECT() *MockJwtServiceInterface_Expecter {
	return &MockJwtServiceInterface_Expecter{mock: &_m.Mock}
}

// ExtractClaims provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) ExtractClaims(token string) (map[string]interface{}, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ExtractClaims")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_ExtractClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractClaims'
type MockJwtServiceInterface_ExtractClaims_Call struct {
	*mock.Call
}

// ExtractClaims is a helper method to define mock.On call
//   - token
func (_e *MockJwtServiceInterface_Expecter) ExtractClaims(token interface{}) *MockJwtServiceInterface_ExtractClaims_Call {
	return &MockJwtServiceInterface_ExtractClaims_Call{Call: _e.mock.On("ExtractClaims", token)}
}

func (_c *MockJwtServiceInterface_ExtractClaims_Call) Run(run func(token string)) *MockJwtServiceInterface_ExtractClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtServiceInterface_ExtractClaims_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockJwtServiceInterface_ExtractClaims_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockJwtServiceInterface_ExtractClaims_Call) RunAndReturn(run func(token string) (map[string]interface{}, error)) *MockJwtServiceInterface_ExtractClaims_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserId provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) ExtractUserId(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ExtractUserId")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_ExtractUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserId'
type MockJwtServiceInterface_ExtractUserId_Call struct {
	*mock.Call
}

// ExtractUserId is a helper method to define mock.On call
//   - token
func (_e *MockJwtServiceInterface_Expecter) ExtractUserId(token interface{}) *MockJwtServiceInterface_ExtractUserId_Call {
	return &MockJwtServiceInterface_ExtractUserId_Call{Call: _e.mock.On("ExtractUserId", token)}
}

func (_c *MockJwtServiceInterface_ExtractUserId_Call) Run(run func(token string)) *MockJwtServiceInterface_ExtractUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtServiceInterface_ExtractUserId_Call) Return(s string, err error) *MockJwtServiceInterface_ExtractUserId_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtServiceInterface_ExtractUserId_Call) RunAndReturn(run func(token string) (string, error)) *MockJwtServiceInterface_ExtractUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) GenerateToken(userId uuid.UUID) (string, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = returnFunc(userId)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJwtServiceInterface_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userId
func (_e *MockJwtServiceInterface_Expecter) GenerateToken(userId interface{}) *MockJwtServiceInterface_GenerateToken_Call {
	return &MockJwtServiceInterface_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userId)}
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) Run(run func(userId uuid.UUID)) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) Return(s string, err error) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtServiceInterface_GenerateToken_Call) RunAndReturn(run func(userId uuid.UUID) (string, error)) *MockJwtServiceInterface_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) ParseToken(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockJwtServiceInterface_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtServiceInterface_Expecter) ParseToken(token interface{}) *MockJwtServiceInterface_ParseToken_Call {
	return &MockJwtServiceInterface_ParseToken_Call{Call: _e.mock.On("ParseToken", token)}
}

func (_c *MockJwtServiceInterface_ParseToken_Call) Run(run func(token string)) *MockJwtServiceInterface_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtServiceInterface_ParseToken_Call) Return(s string, err error) *MockJwtServiceInterface_ParseToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtServiceInterface_ParseToken_Call) RunAndReturn(run func(token string) (string, error)) *MockJwtServiceInterface_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockJwtServiceInterface
func (_mock *MockJwtServiceInterface) ValidateToken(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJwtServiceInterface_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJwtServiceInterface_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token
func (_e *MockJwtServiceInterface_Expecter) ValidateToken(token interface{}) *MockJwtServiceInterface_ValidateToken_Call {
	return &MockJwtServiceInterface_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockJwtServiceInterface_ValidateToken_Call) Run(run func(token string)) *MockJwtServiceInterface_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtServiceInterface_ValidateToken_Call) Return(s string, err error) *MockJwtServiceInterface_ValidateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJwtServiceInterface_ValidateToken_Call) RunAndReturn(run func(token string) (string, error)) *MockJwtServiceInterface_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
