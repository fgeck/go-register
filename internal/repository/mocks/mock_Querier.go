// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/fgeck/go-register/internal/repository"
	"github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateUser(ctx context.Context, arg repository.CreateUserParams) (repository.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) (repository.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.CreateUserParams) repository.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg repository.CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreateUserParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(user repository.User, err error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg repository.CreateUserParams) (repository.User, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUser(ctx context.Context, id pgtype.UUID) (repository.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgtype.UUID) (repository.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgtype.UUID) repository.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgtype.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockQuerier_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetUser(ctx interface{}, id interface{}) *MockQuerier_GetUser_Call {
	return &MockQuerier_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockQuerier_GetUser_Call) Run(run func(ctx context.Context, id pgtype.UUID)) *MockQuerier_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetUser_Call) Return(user repository.User, err error) *MockQuerier_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUser_Call) RunAndReturn(run func(ctx context.Context, id pgtype.UUID) (repository.User, error)) *MockQuerier_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByEmail(ctx context.Context, email string) (repository.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (repository.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) repository.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(user repository.User, err error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (repository.User, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UserExistsByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserExistsByEmail")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UserExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExistsByEmail'
type MockQuerier_UserExistsByEmail_Call struct {
	*mock.Call
}

// UserExistsByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockQuerier_Expecter) UserExistsByEmail(ctx interface{}, email interface{}) *MockQuerier_UserExistsByEmail_Call {
	return &MockQuerier_UserExistsByEmail_Call{Call: _e.mock.On("UserExistsByEmail", ctx, email)}
}

func (_c *MockQuerier_UserExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_UserExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_UserExistsByEmail_Call) Return(b bool, err error) *MockQuerier_UserExistsByEmail_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_UserExistsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *MockQuerier_UserExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}
